// Default tasks
defaultTasks 'clean', 'build', 'licenseFormatMain'

// Apply plugins
apply plugin: 'forge'
apply plugin: 'license'


// Project information
group = "org.spoutcraft"
version = "1.0.0-SNAPSHOT"
archivesBaseName = "spoutcraftmod"
ext.packaging = 'jar'

// Minimum version of Java required
sourceCompatibility = "1.7"
targetCompatibility = "1.7"

// Repositories and dependencies to use
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge-repo"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "inspirenxe-repo"
            url = "http://repo.inspirenxe.org/content/groups/public/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0-SNAPSHOT'
    }
}

// Minecraft Forge version
minecraft {
    version = "1.6.4-9.11.1.964"
}

// Dependencies needed for compilation and test
dependencies {
    compile 'io.netty:netty-all:4.0.13.Final'
    testCompile 'junit:junit:4.8.1'
}

// Include dependencies in the jar
jar {
    from {
        configurations.compile.collect {
            zipTree(it)
        }
    }
}

// License header formatting
import nl.javadude.gradle.plugins.license.License
tasks.withType(License).each { licenseTask ->
    licenseTask.exclude 'assets/**'
    licenseTask.exclude '**/*.info'
}
license {
    header rootProject.file('HEADER.txt')
    strictCheck true
    ext.name = 'SpoutcraftMod'
    ext.team = 'SpoutcraftDev'
    ext.website = 'http://spoutcraft.org'
    ext.inception = 2013
    ext.years = Calendar.getInstance().get(Calendar.YEAR) == ext.inception ? ext.inception : ext.inception + '-' + Calendar.getInstance().get(Calendar.YEAR)
}
licenseFormatMain.execute()

// Javadoc JAR generation
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

// Source JAR generation
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives jar, javadocJar, sourcesJar
}
