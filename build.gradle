// Default tasks
defaultTasks 'clean', 'build', 'licenseFormatMain', 'licenseFormatTest', 'shadow', 'install'

// Apply plugins
apply plugin: 'cobertura'
apply plugin: 'coveralls'
apply plugin: 'forge'
apply plugin: 'license'
apply plugin: 'shadow'
apply plugin: 'maven'
apply plugin: 'signing'

// Basic project information
group = 'org.spoutcraft'
archivesBaseName = 'spoutcraftmod'
version = '1.0.0-SNAPSHOT'

// Extended project information
ext.projectName = 'Spoutcraft'
ext.inceptionYear = '2013'
ext.packaging = 'jar'
ext.url = 'http://spoutcraft.org'
ext.description = 'Forge mod that expands Minecraft through an easy-to-use addon API.'
ext.organization = 'SpoutcraftDev'

// Minecraft version
ext.minecraftVersion = '1.6.4'

// MinecraftForge version
minecraft {
    version = '1.6.4-9.11.1.964'
}

// Minimum version of Java required
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// Define variables
ext.buildNumber = '0'
ext.ciSystem = 'unknown'
ext.commit = 'unknown'

// Configuration settings
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // Always check for new snapshots
}

// Plugin repositories and dependencies
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name = 'shadow-repo'
            url = 'http://dl.bintray.com/content/johnrengelman/gradle-plugins/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0'
        classpath 'org.gradle.plugins:shadow:0.7.4'
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0' // Coveralls plugin dependency
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
    }
}

// Non-plugin repositories and dependencies
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
}
dependencies {
    compile 'com.flowpowered:flow-events:0.1.0-SNAPSHOT'
    compile 'commons-codec:commons-codec:1.8'
    compile 'io.netty:netty-all:4.0.13.Final'
    compile 'junit:junit:4.8.1'
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    compile 'org.powermock:powermock-api-mockito:1.5.2'
    compile 'org.powermock:powermock-module-junit4:1.5.2'
    testCompile 'junit:junit:4.8.1'
    testCompile 'org.powermock:powermock-module-junit4:1.5.2'
}

// Filter, process, and include resources
import org.apache.tools.ant.filters.*
processResources {
    // Include in final JAR
    from(rootProject.rootDir) {
        include 'LICENSE.txt'
    }

    // Filter info file variables
    from('src/main/resources/mcmod.info') {
        filter ReplaceTokens, tokens: [
            "modid": projectName,
            "name": projectName,
            "description": project.ext.description,
            "version": version,
            "buildNumber": buildNumber,
            "mcversion": minecraftVersion,
            "url": url,
            "authors": organization
        ]
    }
}

// Include dependencies in final JAR
shadow {
    artifactAttached = false
    include 'com/flowpowered/**'
    include 'io/netty/**'
    include 'org/apache/**'
}

// License header formatting
import nl.javadude.gradle.plugins.license.License
tasks.withType(License).each { licenseTask ->
    licenseTask.exclude 'assets/**'
    licenseTask.exclude '**/*.info'
}
license {
    ext.name = project.name
    ext.organization = organization
    ext.url = url
    ext.year = inceptionYear
    header rootProject.file('HEADER.txt')
    strictCheck true
}

// Source compiler configuration
configure([compileJava, compileTestJava]) {
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Xlint:-path'
    options.deprecation = true
}

// JAR manifest configuration
manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url)

// Coveralls report configuration
cobertura.coverageFormats = [ 'html', 'xml' ] // Coveralls requires xml format

// Artifact deployment
uploadArchives {
    repositories.mavenDeployer {
        // Javadoc JAR generation
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        // Source JAR generation
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.java.srcDirs
        }

        // Set all artifacts
        artifacts {
            archives jar, javadocJar, sourcesJar
        }

        // Tasks and variables based on if release or snapshot
        if (version.endsWith('-SNAPSHOT')) {
            // Set variable to snapshots repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
        } else {
            // Set variable to releases repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

            // Deployment signing
            signing {
                // Check if uploadArchives task is used
                required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }

                // Sign JAR artifacts
                sign configurations.archives

                // Sign Maven POM
                beforeDeployment {
                    org.gradle.api.artifacts.maven.MavenDeployment deployment -> signing.signPom(deployment)
                }
            }
        }

        // Set login credentials for repository
        repository(url: sonatypeUrl) {
            authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
        }

        // Maven POM generation
        pom.project {
            name projectName
            artifactId archivesBaseName
            packaging packaging
            inceptionYear inceptionYear
            url url
            description project.ext.description

            scm {
                connection 'scm:git:git://github.com/Spoutcraft/SpoutcraftMod.git'
                developerConnection 'scm:git:ssh://git@github.com:Spoutcraft/SpoutcraftMod.git'
                url 'https://github.com/Spoutcraft/SpoutcraftMod'
            }

            licenses {
                license {
                    name 'The MIT License'
                    url 'http://www.tldrlegal.com/license/mit-license'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'Zidane'
                    name 'Chris Sanders'
                    email 'zidane@outlook.com'
                }
                developer {
                    id 'Grinch'
                    name 'Steven Downer'
                    email 'grinch@outlook.com'
                }
                developer {
                    id 'Dockter'
                    name 'Mike Howe'
                    email 'dockter@almuramc.com'
                }
                developer {
                    id 'unknownloner'
                    name 'Unknown Loner'
                    email 'unknownloner.online@gmail.com'
                }
            }

            organization {
                name organization
                url url
            }

            issueManagement {
                system 'github'
                url 'https://github.com/Spoutcraft/SpoutcraftMod/issues'
            }
        }
    }
}
